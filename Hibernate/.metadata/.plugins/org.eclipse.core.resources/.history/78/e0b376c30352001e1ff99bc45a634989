package com.rays.model;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.Restrictions;

import com.rays.DTO.UserDTO;


public class UserModel {
	
	public void add(UserDTO dto)
	{
		
	
		
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
	  Session session = sf.openSession();
	  
	  
           Transaction tx=	  session.beginTransaction();
           
           
           session.save(dto);
           
           tx.commit();
           
           session.close();
           
		  
		  
	}

	public void update(UserDTO dto)
	{
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
	Session session=	  sf.openSession();
	
	Transaction tx =       session.beginTransaction();
	session.update(dto);
	
	tx.commit();
	session.close();
	}
	
	public void delete(UserDTO dto)
	{
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
	     Session session=	sf.openSession();
	     
	       Transaction tx = session.beginTransaction();
	     
	     session.delete(dto);
	     
	     tx.commit();
	     session.close();
	}
	
	public UserDTO authenticate(String loginid, String password)
	{
		 UserDTO dto = null;
		 
		 
		 SessionFactory sf = new Configuration().configure().buildSessionFactory();
		 
	Session session=	 sf.openSession();
	
	   Query q = session.createQuery(" from UserDTO where loginId=? and password=?");
	   q.setString(0, loginid);
	   q.setString(1, password);
	   
	List list =   q.list();
	
	if(list.size()>0)
	{
	   dto=	(UserDTO)list.get(0);
	}
	return dto;
	   
	}
	
	public UserDTO findByPk(int id)
	{
		UserDTO dto =null;
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
	    Session session=   	sf.openSession();
	    
	   dto=  (UserDTO)  session.get(UserDTO.class, id);
	   
	   sf.close();
	   return dto;
	}
	
	public List search()
	{
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		
		Session session = sf.openSession();
		
		 Criteria criteria=   session.createCriteria(UserDTO.class);
		 
		List list=     criteria.list();
		
		UserDTO dto = new UserDTO();
		
		if(dto!=null)
		{
			if(dto.getFirstName()!=null && dto.getFirstName().length()>0)
			{
				criteria.add(Restrictions.eq("FIRSTNAME", dto.getFirstName()));
			}
		}
		
		
		
		
		return list;
		
			}
	
       
}
